require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe CoursesController do

  # This should return the minimal set of attributes required to create a valid
  # Course. As you add validations to Course, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {
      teacher_id: create(:user).id,
      category_id: create(:category).id,
      title: generate(:title),
      description: generate(:lorem)
    }
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # CoursesController. Be sure to keep this updated too.
  def valid_session
    {
      user_id: @current_user.id
    }
  end

  context "performance" do
    require 'benchmark'

    it "takes time", performance: true do
      ap Course.count
      5.times do
        Benchmark.realtime{
          get :index
        }.should < 0.05
      end
    end

  end

  before :each do
    Course.destroy_all
    @current_user = create :user
    @attrs = valid_attributes
  end

  describe "GET index" do
    it "assigns all courses as @courses" do
      course = create :course, hidden: false
      get :index, {}
      assigns(:courses).should eq([course])
    end

    it "doesn't show hidden courses" do
      course = create :course, hidden: true
      get :index, {}
      assigns(:courses).should eq([])
    end

    it "finds courses when searching" do
      course = build :course
      course.title = "awesome science class"
      course.save
      # get :index, {search: "science"}
      # assigns(:courses).should include(course)
      category = create :category, name: "math"
      course.update_attributes category_id: category.id
      get :index, {search: "math"}
      assigns(:courses).should include(course)
      get :index, {category_id: category.slug}
      assigns(:courses).should include(course)
    end
  end

  describe "GET show" do
    it "assigns the requested course as @course" do
      course = create :course
      get :show, {:id => course.to_param}, valid_session
      assigns(:course).should eq(course)
    end
  end

  describe "GET new" do
    it "assigns a new course as @course" do
      get :new, {}, valid_session
      assigns(:course).should be_a_new(Course)
    end

    it "doesn't work when logged out" do
      get :new, {}
      response.redirect_url.should match(login_path)
    end
  end

  describe "GET edit" do
    it "assigns the requested course as @course" do
      course = create :course
      get :edit, {:id => course.to_param}, { user_id: course.teacher_id}
      assigns(:course).should eq(course)
    end

    it "doesn't work when not the course owner" do
      course = create :course
      get :edit, {:id => course.to_param}, valid_session
      response.redirect_url.should match(login_path)
      get :edit, {:id => course.to_param}
      response.redirect_url.should match(login_path)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Course" do
        expect {
          post :create, {:course => @attrs}, { user_id: @attrs[:teacher_id] }
        }.to change(Course, :count).by(1)
      end

      it "assigns a newly created course as @course" do
        post :create, {:course => @attrs}, { user_id: @attrs[:teacher_id] }
        assigns(:course).should be_a(Course)
        assigns(:course).should be_persisted
      end

      it "redirects to the created course" do
        post :create, {:course => @attrs}, { user_id: @attrs[:teacher_id] }
        response.should redirect_to(Course.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved course as @course" do
        # Trigger the behavior that occurs when invalid params are submitted
        Course.any_instance.stub(:save).and_return(false)
        post :create, {:course => {  }}, valid_session
        assigns(:course).should be_a_new(Course)
      end

      # it "re-renders the 'new' template" do
      #   # Trigger the behavior that occurs when invalid params are submitted
      #   Course.any_instance.stub(:save).and_return(false)
      #   post :create, {:course => {  }}, valid_session
      #   response.should render_template("courses/form")
      # end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested course" do
        course = create :course
        # Assuming there are no other courses in the database, this
        # specifies that the Course created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        title = generate(:title)
        Course.any_instance.should_receive(:update_attributes).with({ "title"=> title })
        put :update, {:id => course.to_param, :course => { title: title }}, {user_id: course.teacher_id}
      end

      it "assigns the requested course as @course" do
        course = create :course
        put :update, {:id => course.to_param, course: { title: generate(:title) }}, {user_id: course.teacher_id}
        assigns(:course).should eq(course)
      end

      it "redirects to the course" do
        course = create :course
        put :update, {:id => course.to_param, course: { title: generate(:title) }}, {user_id: course.teacher_id}
        course = assigns(:course)
        response.should redirect_to(course)
      end
    end

    describe "with invalid params" do
      it "assigns the course as @course" do
        course = create :course
        # Trigger the behavior that occurs when invalid params are submitted
        old_title = course.title
        Course.any_instance.stub(:save).and_return(false)
        put :update, {:id => course.to_param, :course => { title: generate(:title) }}, valid_session
        assigns(:course).should eq(course)
        assigns(:course).title.should eq(old_title)
      end

      # it "re-renders the 'edit' template" do
      #   course = create :course
      #   # Trigger the behavior that occurs when invalid params are submitted
      #   Course.any_instance.stub(:save).and_return(false)
      #   put :update, {:id => course.to_param, :course => {  }}, valid_session
      # end
    end
  end

  # describe "DELETE destroy" do
  #   it "destroys the requested course" do
  #     course = Course.create! valid_attributes
  #     expect {
  #       delete :destroy, {:id => course.to_param}, valid_session
  #     }.to change(Course, :count).by(-1)
  #   end

  #   it "redirects to the courses list" do
  #     course = Course.create! valid_attributes
  #     delete :destroy, {:id => course.to_param}, valid_session
  #     response.should redirect_to(courses_url)
  #   end
  # end

end
